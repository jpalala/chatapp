{
  "author": {
    "name": "doublespout",
    "email": "snoopyxdy@163.com",
    "url": "http://snoopyxdy.blog.163.com"
  },
  "name": "client-session",
  "description": "cookie session for nodejs, store session in client browers's cookie, support Cross Process session without database store",
  "keywords": [
    "cookie session",
    "cookie",
    "session",
    "client session",
    "cookie",
    "process",
    "Cross Process"
  ],
  "version": "0.1.7",
  "url": "https://github.com/DoubleSpout/nodeClientSession",
  "homepage": "https://github.com/DoubleSpout/nodeClientSession",
  "repository": {
    "type": "git",
    "url": "https://github.com/DoubleSpout/nodeClientSession.git"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "cookie": "0.1.2"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "tset": "node ./test/main.js"
  },
  "readme": "# client-session(cookie session for nodejs)[![Build Status](https://travis-ci.org/DoubleSpout/nodeClientSession.png?branch=master)](https://travis-ci.org/DoubleSpout/nodeClientSession)\r\n\r\nnodejs client cookie session middleware, support cross process and multi server without any other database(such as redis or mongodb) to store session data, cookie is encryption and md5 verify signatures. \r\n\r\nthe module can also be used in express framework.\r\n\r\n## Installing the module\r\n\r\nWith [npm](http://npmjs.org/):\r\n\r\nclient-session module is supported windows, linux, mac.\r\n\r\nMake sure, node-gyp has installed.\r\n\r\n     npm install client-session\r\n\r\nFrom source:\r\n\r\n     git clone https://github.com/DoubleSpout/nodeClientSession.git\r\n     cd nodeClientSession\r\n     node-gyp rebuild\r\n\r\nTo include the module in your project:\r\n\r\n     var cs = require('client-session');\r\n\r\n##simple example\r\n\r\n\t\tvar http = require('http');\r\n\t\tvar cs = require('client-session'); \r\n\t\tvar clientSession = cs('mysecretkey');\r\n\r\n\t\thttp.createServer(function (request, response) {\r\n\t\t   if(request.url == '/favicon.ico') return response.end(''); //stop '/favicon.ico' request\r\n\r\n\t\t   clientSession.csget(request, response);//get csession\r\n\t\t   var count = request.csession['count'];//use session\r\n\r\n\t\t   if(!count) count = 1;\r\n\t\t   else\tcount++\r\n \r\n           request.csession['count'] = count; //update session\r\n\t\t   clientSession.csset(request, response);//flush session to cookie\r\n\r\n\t\t   response.writeHead(200, {'Content-Type': 'text/plain'});\r\n\t\t   response.end(count.toString()); //response count add every time\r\n\r\n\t\t}).listen(8124);\r\n\t\tconsole.log('Server running at http://127.0.0.1:8124/');\r\n\r\nwhen you run the example,you will see count +1 every time in your browser\r\n\r\n##express 4.x example\r\n\r\n\t\tvar express = require('express');\r\n\t\tvar path = require('path')\r\n\t\tvar cs = require('client-session');\r\n\t\tvar clientSession = cs('mysecretkey');\r\n\t\tvar app = express();\r\n\t\tapp.use(clientSession.connect());\r\n\t\tapp.get('/', function(req, res){\r\n\t\t  var count = req.csession['count'];\r\n\t\t  if(!count) count = 1;\r\n\t\t  else count++;\r\n\t\t  req.csession['count'] = count;\r\n\t\t  //sync to cookie session equal to res.csflush(),make sure to call it before response\r\n\t\t  req.csflush(); \r\n\t\t  res.send(count.toString());\r\n\t\t});\r\n\t\tapp.listen(8124);\r\n\t\tconsole.log('Server running at http://127.0.0.1:8124/');\r\n\r\n##Api doc\r\n1.get clientSession object\r\n\t\r\n\tvar clientSession = require('client-session')(YOUR_SERCRET_KEY, OPTIONS)\r\n\r\n2.OPTIONS\r\ndefault options is below:\r\n\r\n\t{\r\n\t\tpath:'/',  //session path\r\n\t\tmaxAge:3600, //session stored time,set 0 when user close browser, session will be lost\r\n\t\tsecure:false, //https session\r\n\t\thttpOnly:true, //httpOnly,set true, browser javascript could not be get cookie\r\n\t}\r\n\r\n3.get csession from request objcet\r\n\r\n\tclientSession.csget(request, response [,callback]);\r\n\r\nthe client session will bd stored in `request['csession']`\r\n\r\n4.flush the client session to client browser.\r\n\r\n\tclientSession.csset(request, response);//flush session to cookie\r\n\r\n5.express example\r\n\r\nsee the express example, make sure before you response to client call the method `req.csflush()` or `res.csflush()` to flush session into cookie header\r\n\r\n##clinet-session work flow:\r\n1.Generation middleware and set the key which is strong enough\r\n\r\n2.When client request is comming,send the req,res and cookie string to c++ addon\r\n\r\n3.get the client session data from cookie string, and store it in req object\r\n\r\n4.Before server respones the client, generate the signature and store it in res objec, and then add cookie into response header.\r\n\r\n##notice\r\n1.The client-session must be smaller than 1k,so it better to store userid or username.\r\n\r\n2.Although the clinet-session cookie is encryption, better not store passowrd in it,just store user's identity.\r\n\r\n3.To use client-session, without the use of ip hash or cookie hash, client-session works fine.\r\n\r\n4.To use clinet-session, you never need database such as redis to store session data,they are all stored in the browser's cookie. \r\n\r\n##benchmark\r\ncommond : ab -c 500 -n 20000 http://192.168.150.3:8124/\r\n\r\nenv: linux system 2cpus 64bits 8G men\r\n\r\nexpress + redis + 2 process session:\r\n\r\n\t\tServer Software:\r\n\t\tServer Hostname:        192.168.150.3\r\n\t\tServer Port:            8124\r\n\r\n\t\tDocument Path:          /\r\n\t\tDocument Length:        28 bytes\r\n\r\n\t\tConcurrency Level:      500\r\n\t\tTime taken for tests:   52.557 seconds\r\n\t\tComplete requests:      20000\r\n\t\tFailed requests:        0\r\n\t\tWrite errors:           0\r\n\t\tTotal transferred:      8952700 bytes\r\n\t\tHTML transferred:       560000 bytes\r\n\t\tRequests per second:    380.54 [#/sec] (mean)\r\n\t\tTime per request:       1313.925 [ms] (mean)\r\n\t\tTime per request:       2.628 [ms] (mean, across all concurrent requests)\r\n\t\tTransfer rate:          166.35 [Kbytes/sec] received\r\n\r\n\t\tConnection Times (ms)\r\n\t\t              min  mean[+/-sd] median   max\r\n\t\tConnect:        0    2  21.2      2    2996\r\n\t\tProcessing:    26 1292 637.1   1161    4242\r\n\t\tWaiting:        5  639 413.0    625    4225\r\n\t\tTotal:         27 1294 637.5   1163    4243\r\n\r\n\t\tPercentage of the requests served within a certain time (ms)\r\n\t\t  50%   1163\r\n\t\t  66%   1178\r\n\t\t  75%   1186\r\n\t\t  80%   1192\r\n\t\t  90%   1226\r\n\t\t  95%   1437\r\n\t\t  98%   4188\r\n\t\t  99%   4228\r\n\t\t 100%   4243 (longest request)\r\n\r\nexpress + client-session +2 process session:\r\n\r\n\t\tServer Software:\r\n\t\tServer Hostname:        192.168.150.3\r\n\t\tServer Port:            8124\r\n\r\n\t\tDocument Path:          /\r\n\t\tDocument Length:        28 bytes\r\n\r\n\t\tConcurrency Level:      500\r\n\t\tTime taken for tests:   40.630 seconds\r\n\t\tComplete requests:      20000\r\n\t\tFailed requests:        0\r\n\t\tWrite errors:           0\r\n\t\tTotal transferred:      9760000 bytes\r\n\t\tHTML transferred:       560000 bytes\r\n\t\tRequests per second:    492.25 [#/sec] (mean)\r\n\t\tTime per request:       1015.750 [ms] (mean)\r\n\t\tTime per request:       2.031 [ms] (mean, across all concurrent requests)\r\n\t\tTransfer rate:          234.59 [Kbytes/sec] received\r\n\r\n\t\tConnection Times (ms)\r\n\t\t              min  mean[+/-sd] median   max\r\n\t\tConnect:        0    2  21.2      1    2996\r\n\t\tProcessing:    36  998 477.2    931    3946\r\n\t\tWaiting:        5  572 531.5    512    3922\r\n\t\tTotal:         38 1000 477.6    933    3948\r\n\r\n\t\tPercentage of the requests served within a certain time (ms)\r\n\t\t  50%    933\r\n\t\t  66%    942\r\n\t\t  75%    950\r\n\t\t  80%    956\r\n\t\t  90%    971\r\n\t\t  95%    988\r\n\t\t  98%   3926\r\n\t\t  99%   3941\r\n\t\t 100%   3948 (longest request)\r\n\r\n## License\r\n\r\nMIT\r\n\r\n",
  "readmeFilename": "README.md",
  "gypfile": true,
  "bugs": {
    "url": "https://github.com/DoubleSpout/nodeClientSession/issues"
  },
  "_id": "client-session@0.1.7",
  "_from": "client-session@^0.1.7"
}
